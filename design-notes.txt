DESIGN DECISIONS
- Don't pull directly from CMS. This means
  * No use of OIDs
  * Different field names
  * No need for 1-1 structure mapping
- Generally reuse CMS-style mechanisms
- No attempt to do streaming data. JSON is unordered
- Currently no support for our own certificate types:
  - Support for embedded X.509
  - Define a Web service for verification
- Maybe later define our own certs just as a special case of 
  this format
- No canonicalization. Anything that needs canon is just a binary
  literal.  E.g. don't sign base-64, since it needs to be
  canonicalized for newlines.
- Standard order of signing and encryption.
- All important metadata goes in the inner JSONo
- All Dates with cryptographic significance are in RFC 3339 Zulu (5.8)

FEATURES SUPPORTED
- Encryption
  - One to one
  - One to many
  - Asymmetric encryption
  - Symmetric encryption
  - Mixed (symmetric/asymmetric)
  - All encrypted data comes with an integrity check (MAC/AEAD)

- Signature
  - Single signature on a message
  - Certificates
    - Embedded
    - Via reference
    - CRLs (?)







OPEN ISSUES:
- CRLS in message
- PKIXChain versus CertificateChain { type='pkix'}

